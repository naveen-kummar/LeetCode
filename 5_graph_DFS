#include <iostream>
#include <vector>
using namespace std;

// Function to perform DFS
void dfs(int node, vector<vector<int>>& adjList, vector<bool>& visited) {
    // Mark the current node as visited
    visited[node] = true;
    cout << node << " "; // Print the current node

    // Recursively visit all adjacent unvisited nodes
    for (int neighbor : adjList[node]) {
        if (!visited[neighbor]) {
            dfs(neighbor, adjList, visited);
        }
    }
}

int main() {
    // Number of nodes and edges
    int nodes, edges;
    cout << "Enter number of nodes and edges: ";
    cin >> nodes >> edges;

    // Adjacency list representation of the graph
    vector<vector<int>> adjList(nodes);

    // Input graph edges
    cout << "Enter edges (u v):" << endl;
    for (int i = 0; i < edges; i++) {
        int u, v;
        cin >> u >> v;
        adjList[u].push_back(v);
        adjList[v].push_back(u); // For undirected graph
    }

    // Visited array to keep track of visited nodes
    vector<bool> visited(nodes, false);

    // Perform DFS from node 0 (or any starting node)
    cout << "DFS Traversal starting from node 0: ";
    dfs(0, adjList, visited);

    return 0;
}
